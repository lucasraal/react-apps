

// setting dynamic inline styles
<label style={{ color: !isValid ? "red" : "black" }}>Course Goal</label>
<input
  type="text"
  onChange={goalInputChangeHandler}
  style={{
    backgroundColor: !isValid ? "salmon" : "transparent",
    borderColor: !isValid ? "red" : "black",
  }}
/>


// setting CSS classes dynamically
<div className={`form-control ${!isValid ? "invalid" : ""}`}>

.form-control.invalid input {
  border-color: red;
  background-color: rgb(224, 153, 153);
}

.form-control.invalid label {
  color: red;
}


// using styled-components
<FormControl className={!isValid && "invalid"}>
const FormControl = styled.div`
  margin: 0.5rem 0;

  & label {
    font-weight: bold;
    display: block;
    margin-bottom: 0.5rem;
  }

  & input {
    display: block;
    width: 100%;
    border: 1px solid #ccc;
    font: inherit;
    line-height: 1.5rem;
    padding: 0 0.25rem;
  }

  & input:focus {
    outline: none;
    background: #fad0ec;
    border-color: #8b005d;
  }

  &.invalid input {
    border-color: red;
    background-color: rgb(224, 153, 153);
  }

  &.invalid label {
    color: red;
  }
`;


// setting conditional styles using styled-components
import styles from "./CourseInput.module.css";

const FormControl = styled.div`
  margin: 0.5rem 0;

  & label {
    font-weight: bold;
    display: block;
    margin-bottom: 0.5rem;
    ${(props) => (props.invalid ? "color: red" : "")};
  }

  & input {
    display: block;
    width: 100%;
    border: 1px solid ${(props) => (props.invalid ? "red" : "#ccc")};
    background: ${(props) => (props.invalid ? "salmon" : "transparent")};
    font: inherit;
    line-height: 1.5rem;
    padding: 0 0.25rem;
  }
`;